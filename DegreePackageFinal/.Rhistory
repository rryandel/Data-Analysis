for (i in 1:nrow(lat_data)){
hour <- as.numeric(substring(lat_data[i, ], 1, 2))
temp <- gsub("[^-.0-9]", "", lat_data[i, ])
min <- as.numeric(gsub(hour, "", temp))
degree <- (hour + (min/60))
lat_data[i, ] <<- degree
}
# Direction TF statement
if (Direction == TRUE){
as.numeric(unlist(lat_data))
x <- as.numeric(mean(lat_data[ , 1]))
#x <- as.numeric(lapply(lat_data, mean, na.rm = TRUE))
if (x > 0){
D <- as.character("North")
}
else{
D <- as.character("South")
}
#z <- as.numeric(lapply(long_data, mean, na.rm = TRUE))
as.numeric(unlist(long_data))
z <- as.numeric(mean(long_data[ , 1]))
if (z > 0){
R <- as.character("East")
}
else{
R <- as.character("West")
}
cat("The average area of these coordinates is located in:", D, R)
}
}
# This part is necessary to test and run the function.
# Users should already have this in their code
data <- read.csv("~/Desktop/School/Fall 2022/Programming/Assingment 2/gw_data.csv")
long_data <- data.frame(data$Longitude)
lat_data <- data.frame(data$Latitude)
DegreeConv(long_data, lat_data, Direction = TRUE)
## This should be up to date.
## Don't forget to add the Direction part when you figure it out
#' This function takes a matrix or data frame that contains a set of latitudes and longitudes
#' in degree notation. It will convert the degree coordinates to decimal degrees and reassign
#' the given matrix to the newly converted values. There is also an option for direction.
#' When set to true, the function will add N, E, S, or W depending on the value of each
#' coordinate.
#' @param long_data a matrix or data frame
#' @param lat_data a matrix or data frame
#' @param Direction enables users to add direction notation if preferred
#' @return matrix thats contains converted decimal degree values
#' @export
DegreeConv <- function(long_data, lat_data, Direction=FALSE){
#Conversion of Longitude
for (i in 1:nrow(long_data)){
hour <- as.numeric(substring(long_data[i, ], 1, 2))
temp <- gsub("[^-.0-9]", "", long_data[i, ])
min <- as.numeric(gsub(hour, "", temp))
degree <- (hour + (min/60))
long_data[i, ] <<- degree
}
#Conversion of Latitude
for (i in 1:nrow(lat_data)){
hour <- as.numeric(substring(lat_data[i, ], 1, 2))
temp <- gsub("[^-.0-9]", "", lat_data[i, ])
min <- as.numeric(gsub(hour, "", temp))
degree <- (hour + (min/60))
lat_data[i, ] <<- degree
}
x <- as.matrix(lat_data)
z <- as.matrix(long_data)
# Direction TF statement
if (Direction == TRUE){
x <- as.numeric(mean(lat_data[ , 1]))
if (x > 0){
D <- as.character("North")
}
else{
D <- as.character("South")
}
z <- as.numeric(mean(long_data[ , 1]))
if (z > 0){
R <- as.character("East")
}
else{
R <- as.character("West")
}
cat("The average area of these coordinates is located in:", D, R)
}
}
# This part is necessary to test and run the function.
# Users should already have this in their code
data <- read.csv("~/Desktop/School/Fall 2022/Programming/Assingment 2/gw_data.csv")
long_data <- data.frame(data$Longitude)
lat_data <- data.frame(data$Latitude)
DegreeConv(long_data, lat_data, Direction = TRUE)
DegreeConv(long_data, lat_data, Direction = FALSE)
View(lat_data)
x <- as.matrix(lat_data)
z <- as.matrix(long_data)
x <- as.numeric(mean(lat_data[ , 1]))
x <- as.matrix(lat_data)
z <- as.matrix(long_data)
x <- as.numeric(x)
x <- as.matrix(lat_data)
z <- as.matrix(long_data)
x <- mean(as.numeric(x))
## This should be up to date.
## Don't forget to add the Direction part when you figure it out
#' This function takes a matrix or data frame that contains a set of latitudes and longitudes
#' in degree notation. It will convert the degree coordinates to decimal degrees and reassign
#' the given matrix to the newly converted values. There is also an option for direction.
#' When set to true, the function will add N, E, S, or W depending on the value of each
#' coordinate.
#' @param long_data a matrix or data frame
#' @param lat_data a matrix or data frame
#' @param Direction enables users to add direction notation if preferred
#' @return matrix thats contains converted decimal degree values
#' @export
DegreeConv <- function(long_data, lat_data, Direction=FALSE){
#Conversion of Longitude
for (i in 1:nrow(long_data)){
hour <- as.numeric(substring(long_data[i, ], 1, 2))
temp <- gsub("[^-.0-9]", "", long_data[i, ])
min <- as.numeric(gsub(hour, "", temp))
degree <- (hour + (min/60))
long_data[i, ] <<- degree
}
#Conversion of Latitude
for (i in 1:nrow(lat_data)){
hour <- as.numeric(substring(lat_data[i, ], 1, 2))
temp <- gsub("[^-.0-9]", "", lat_data[i, ])
min <- as.numeric(gsub(hour, "", temp))
degree <- (hour + (min/60))
lat_data[i, ] <<- degree
}
x <- as.matrix(lat_data)
z <- as.matrix(long_data)
# Direction TF statement
if (Direction == TRUE){
x <- mean(as.numeric(x))
if (x > 0){
D <- as.character("North")
}
else{
D <- as.character("South")
}
z <- mean(as.numeric(z))
if (z > 0){
R <- as.character("East")
}
else{
R <- as.character("West")
}
cat("The average area of these coordinates is located in:", D, R)
}
}
# This part is necessary to test and run the function.
# Users should already have this in their code
data <- read.csv("~/Desktop/School/Fall 2022/Programming/Assingment 2/gw_data.csv")
long_data <- data.frame(data$Longitude)
lat_data <- data.frame(data$Latitude)
DegreeConv(long_data, lat_data, Direction = TRUE)
x <- as.matrix(lat_data)
x <- mean(as.numeric(x))
if (x > 0){
D <- as.character("North")
}
else{
## This should be up to date.
## Don't forget to add the Direction part when you figure it out
#' This function takes a matrix or data frame that contains a set of latitudes and longitudes
#' in degree notation. It will convert the degree coordinates to decimal degrees and reassign
#' the given matrix to the newly converted values. There is also an option for direction.
#' When set to true, the function will add N, E, S, or W depending on the value of each
#' coordinate.
#' @param long_data a matrix or data frame
#' @param lat_data a matrix or data frame
#' @param Direction enables users to add direction notation if preferred
#' @return matrix thats contains converted decimal degree values
#' @export
DegreeConv <- function(long_data, lat_data, Direction=FALSE){
#Conversion of Longitude
for (i in 1:nrow(long_data)){
hour <- as.numeric(substring(long_data[i, ], 1, 2))
temp <- gsub("[^-.0-9]", "", long_data[i, ])
min <- as.numeric(gsub(hour, "", temp))
degree <- (hour + (min/60))
long_data[i, ] <<- degree
}
#Conversion of Latitude
for (i in 1:nrow(lat_data)){
hour <- as.numeric(substring(lat_data[i, ], 1, 2))
temp <- gsub("[^-.0-9]", "", lat_data[i, ])
min <- as.numeric(gsub(hour, "", temp))
degree <- (hour + (min/60))
lat_data[i, ] <<- degree
}
x <- as.matrix(lat_data)
z <- as.matrix(long_data)
x <- mean(as.numeric(x))
z <- mean(as.numeric(z))
# Direction TF statement
if (Direction == TRUE){
if (x > 0){
D <- as.character("North")
}
else{
D <- as.character("South")
}
if (z > 0){
R <- as.character("East")
}
else{
R <- as.character("West")
}
cat("The average area of these coordinates is located in:", D, R)
}
}
# This part is necessary to test and run the function.
# Users should already have this in their code
data <- read.csv("~/Desktop/School/Fall 2022/Programming/Assingment 2/gw_data.csv")
long_data <- data.frame(data$Longitude)
lat_data <- data.frame(data$Latitude)
DegreeConv(long_data, lat_data)
## This should be up to date.
## Don't forget to add the Direction part when you figure it out
#' This function takes a matrix or data frame that contains a set of latitudes and longitudes
#' in degree notation. It will convert the degree coordinates to decimal degrees and reassign
#' the given matrix to the newly converted values. There is also an option for direction.
#' When set to true, the function will add N, E, S, or W depending on the value of each
#' coordinate.
#' @param long_data a matrix or data frame
#' @param lat_data a matrix or data frame
#' @param Direction enables users to add direction notation if preferred
#' @return matrix thats contains converted decimal degree values
#' @export
DegreeConv <- function(long_data, lat_data, Direction=FALSE){
#Conversion of Longitude
for (i in 1:nrow(long_data)){
hour <- as.numeric(substring(long_data[i, ], 1, 2))
temp <- gsub("[^-.0-9]", "", long_data[i, ])
min <- as.numeric(gsub(hour, "", temp))
degree <- (hour + (min/60))
long_data[i, ] <<- degree
}
#Conversion of Latitude
for (i in 1:nrow(lat_data)){
hour <- as.numeric(substring(lat_data[i, ], 1, 2))
temp <- gsub("[^-.0-9]", "", lat_data[i, ])
min <- as.numeric(gsub(hour, "", temp))
degree <- (hour + (min/60))
lat_data[i, ] <<- degree
}
x <- as.matrix(lat_data)
z <- as.matrix(long_data)
x <- mean(as.integer(x))
z <- mean(as.integer(z))
# Direction TF statement
if (Direction == TRUE){
if (x > 0){
D <- as.character("North")
}
else{
D <- as.character("South")
}
if (z > 0){
R <- as.character("East")
}
else{
R <- as.character("West")
}
cat("The average area of these coordinates is located in:", D, R)
}
}
# This part is necessary to test and run the function.
# Users should already have this in their code
data <- read.csv("~/Desktop/School/Fall 2022/Programming/Assingment 2/gw_data.csv")
long_data <- data.frame(data$Longitude)
lat_data <- data.frame(data$Latitude)
DegreeConv(long_data, lat_data)
x <- as.matrix(lat_data)
View(lat_data)
x <- mean(as.integer(x))
z <- as.matrix(long_data)
x <- as.matrix(lat_data)
x <- mean(as.integer(x))
z <- mean(as.integer(z))
if (x > 0){
D <- as.character("North")
}
else{
## This should be up to date.
## Don't forget to add the Direction part when you figure it out
#' This function takes a matrix or data frame that contains a set of latitudes and longitudes
#' in degree notation. It will convert the degree coordinates to decimal degrees and reassign
#' the given matrix to the newly converted values. There is also an option for direction.
#' When set to true, the function will add N, E, S, or W depending on the value of each
#' coordinate.
#' @param long_data a matrix or data frame
#' @param lat_data a matrix or data frame
#' @param Direction enables users to add direction notation if preferred
#' @return matrix thats contains converted decimal degree values
#' @export
DegreeConv <- function(long_data, lat_data, Direction=FALSE){
#Conversion of Longitude
for (i in 1:nrow(long_data)){
hour <- as.numeric(substring(long_data[i, ], 1, 2))
temp <- gsub("[^-.0-9]", "", long_data[i, ])
min <- as.numeric(gsub(hour, "", temp))
degree <- (hour + (min/60))
long_data[i, ] <<- degree
}
#Conversion of Latitude
for (i in 1:nrow(lat_data)){
hour <- as.numeric(substring(lat_data[i, ], 1, 2))
temp <- gsub("[^-.0-9]", "", lat_data[i, ])
min <- as.numeric(gsub(hour, "", temp))
degree <- (hour + (min/60))
lat_data[i, ] <<- degree
}
x <- as.matrix(lat_data)
z <- as.matrix(long_data)
x <- mean(as.integer(x))
z <- mean(as.integer(z))
# Direction TF statement
if (Direction == TRUE){
if (x > 0){
D <- as.character("North")
}
else{
D <- as.character("South")
}
if (z > 0){
R <- as.character("East")
}
else{
R <- as.character("West")
}
cat("The average area of these coordinates is located in:", D, R)
}
}
# This part is necessary to test and run the function.
# Users should already have this in their code
data <- read.csv("~/Desktop/School/Fall 2022/Programming/Assingment 2/gw_data.csv")
long_data <- data.frame(data$Longitude)
lat_data <- data.frame(data$Latitude)
DegreeConv(long_data, lat_data, Direction = TRUE)
setwd("~/Desktop/School/Fall 2022/Programming/Assingment 2/DegreePackage2")
DegreeConv <- function(long_data, lat_data, Direction=FALSE){
#Conversion of Longitude
for (i in 1:nrow(long_data)){
hour <- as.numeric(substring(long_data[i, ], 1, 2))
temp <- gsub("[^-.0-9]", "", long_data[i, ])
min <- as.numeric(gsub(hour, "", temp))
degree <- (hour + (min/60))
long_data[i, ] <<- degree
}
#Conversion of Latitude
for (i in 1:nrow(lat_data)){
hour <- as.numeric(substring(lat_data[i, ], 1, 2))
temp <- gsub("[^-.0-9]", "", lat_data[i, ])
min <- as.numeric(gsub(hour, "", temp))
degree <- (hour + (min/60))
lat_data[i, ] <<- degree
}
#This is where Im struggling.
#IF I run these four lines and then the if statement, it works. But When
# I try to run the whole function, it seems not to register theses lines
# I assume this is due to some property of function memory that I do not
# understand.
x <- as.matrix(lat_data)
z <- as.matrix(long_data)
x <- mean(as.integer(x))
z <- mean(as.integer(z))
# Direction TF statement
if (Direction == TRUE){
if (x > 0){
D <- as.character("North")
}
else{
D <- as.character("South")
}
if (z > 0){
R <- as.character("East")
}
else{
R <- as.character("West")
}
cat("The average area of these coordinates is located in:", D, R)
}
return(cbind(long_data, lat_data))
}
# This part is necessary to test and run the function.
# Users should already have this in their code
data <- read.csv("~/Desktop/School/Fall 2022/Programming/Assingment 2/gw_data.csv")
long_data <- data.frame(data$Longitude)
lat_data <- data.frame(data$Latitude)
DegreeConv <- function(long_data, lat_data, Direction=FALSE){
#Conversion of Longitude
for (i in 1:nrow(long_data)){
hour <- as.numeric(substring(long_data[i, ], 1, 2))
temp <- gsub("[^-.0-9]", "", long_data[i, ])
min <- as.numeric(gsub(hour, "", temp))
degree <- (hour + (min/60))
long_data[i, ] <<- degree
}
#Conversion of Latitude
for (i in 1:nrow(lat_data)){
hour <- as.numeric(substring(lat_data[i, ], 1, 2))
temp <- gsub("[^-.0-9]", "", lat_data[i, ])
min <- as.numeric(gsub(hour, "", temp))
degree <- (hour + (min/60))
lat_data[i, ] <<- degree
}
#This is where Im struggling.
#IF I run these four lines and then the if statement, it works. But When
# I try to run the whole function, it seems not to register theses lines
# I assume this is due to some property of function memory that I do not
# understand.
x <- as.matrix(lat_data)
z <- as.matrix(long_data)
x <- mean(as.integer(x))
z <- mean(as.integer(z))
# Direction TF statement
if (Direction == TRUE){
if (x > 0){
D <- as.character("North")
}
else{
D <- as.character("South")
}
if (z > 0){
R <- as.character("East")
}
else{
R <- as.character("West")
}
cat("The average area of these coordinates is located in:", D, R)
}
return(cbind(long_data, lat_data))
}
# This part is necessary to test and run the function.
# Users should already have this in their code
data <- read.csv("~/Desktop/School/Fall 2022/Programming/Assingment 2/gw_data.csv")
long_data <- data.frame(data$Longitude)
lat_data <- data.frame(data$Latitude)
data <- read.csv("~/Desktop/School/Fall 2022/Programming/Assingment 2/gw_data.csv")
long_data <- data.frame(data$Longitude)
lat_data <- data.frame(data$Latitude)
DegreeConv(long_data, lat_data, Direction = TRUE)
## This should be up to date.
## Don't forget to add the Direction part when you figure it out
#' This function takes a matrix or data frame that contains a set of latitudes and longitudes
#' in degree notation. It will convert the degree coordinates to decimal degrees and reassign
#' the given matrix to the newly converted values. There is also an option for direction.
#' When set to true, the function will add N, E, S, or W depending on the value of each
#' coordinate.
#' @param long_data a matrix or data frame
#' @param lat_data a matrix or data frame
#' @param Direction enables users to add a mean direction if curious
#' @return matrix thats contains converted decimal degree values
#' @export
DegreeConv <- function(long_data, lat_data, Direction=FALSE){
#Conversion of Longitude
for (i in 1:nrow(long_data)){
hour <- as.numeric(substring(long_data[i, ], 1, 2))
temp <- gsub("[^-.0-9]", "", long_data[i, ])
min <- as.numeric(gsub(hour, "", temp))
degree <- (hour + (min/60))
long_data[i, ] <- degree
}
#Conversion of Latitude
for (i in 1:nrow(lat_data)){
hour <- as.numeric(substring(lat_data[i, ], 1, 2))
temp <- gsub("[^-.0-9]", "", lat_data[i, ])
min <- as.numeric(gsub(hour, "", temp))
degree <- (hour + (min/60))
lat_data[i, ] <- degree
}
#This is where Im struggling.
#IF I run these four lines and then the if statement, it works. But When
# I try to run the whole function, it seems not to register theses lines
# I assume this is due to some property of function memory that I do not
# understand.
x <- as.matrix(lat_data)
z <- as.matrix(long_data)
x <- mean(as.integer(x))
z <- mean(as.integer(z))
# Direction TF statement
if (Direction == TRUE){
if (x > 0){
D <- as.character("North")
}
else{
D <- as.character("South")
}
if (z > 0){
R <- as.character("East")
}
else{
R <- as.character("West")
}
cat("The average area of these coordinates is located in:", D, R)
}
return(cbind(long_data, lat_data))
}
# This part is necessary to test and run the function.
# Users should already have this in their code
data <- read.csv("~/Desktop/School/Fall 2022/Programming/Assingment 2/gw_data.csv")
long_data <- data.frame(data$Longitude)
lat_data <- data.frame(data$Latitude)
test <- DegreeConv(long_data = long_data, lat_data = lat_data, Direction = TRUE)
View(lat_data)
View(long_data)
View(test)
